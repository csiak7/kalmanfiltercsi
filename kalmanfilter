#include <MPU9255.h>
#include "avionics.h"
#include "packets.h"

using namespace avionics;

#step, acceleration noise, gps noise!!!

const float dt = 0.1;
const float accel_noise = 0.1;
const float gps_noise = 5.0;

# setting up the x, y,z for position & vx, vy and vz for velocity. Made P for prediction !!!!

struct KalmanFilter {
    float x, y, z;
    float vx, vy, vz;

    float P[6][6]; #<--- covariance matrix 6x6 :) to track uncertainty 

    KalmanFilter() { # we initialize these states to 0 to get started !!
        x = y = z = 0;
        vx = vy = vz = 0;
        memset(P, 0, sizeof(P));
    }

#this function is predicting position with velocity and step...

    void predict(float ax, float ay, float az) {
        vx += ax * dt;
        vy += ay * dt;
        vz += az * dt;

        x += vx * dt + 0.5 * ax * dt * dt;

        y += vy * dt + 0.5 * ay * dt * dt;
        z += vz * dt + 0.5 * az * dt * dt;

#our little for loop for the acceleration noise in the covariance matrix
        for (int i = 0; i < 6; i++) {
            P[i][i] += accel_noise;
        }
    }

    void update(float gps_x, float gps_y, float gps_z) {

        float K = P[0][0] / (P[0][0] + gps_noise);

        x += K * (gps_x - x);
        y += K * (gps_y - y);
        z += K * (gps_z - z);

        for (int i = 0; i < 6; i++) {
            P[i][i] *= (1 - K);
        }
    }
};

#so this class reads and handles raw data from the adafruit gps module. this reads raw NMEA sentences from the gps, parses the data and then
#sends position related info.

class DevGpsImu : public Device {
   private:

    HardwareSerial& gpsSerial = Serial1; 

    Adafruit_GPS gps{&gpsSerial};

    MPU9255 imu;
    KalmanFilter kf;

#setup- when the device initializes

   public:
    void Setup() override {
        gpsSerial.setPins(12, 13);   #for our pins
        gps.begin(9600);

        gps.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);

        gps.sendCommand(PMTK_SET_NMEA_UPDATE_10HZ);
        gps.sendCommand(PGCMD_ANTENNA);

        if (imu.init()) {
            Die("MPU9255 init failed");
        }
        imu.disable(magnetometer);
        imu.disable(thermometer);
    }

    void Loop() override {

       imu.read_acc();
        float ax = imu.ax;

        float ay = imu.ay;

        float az = imu.az;

        kf.predict(ax, ay, az);

        gps.read();
        if (gps.newNMEAreceived() && gps.parse(gps.lastNMEA()) && gps.fix) {
            float gps_x = gps.longitude_fixed * 1e-5;
           
            float gps_y = gps.latitude_fixed * 1e-5;
            float gps_z = gps.altitude;
            kf.update(gps_x, gps_y, gps_z);
        }

#position packet -- 
        PositionPacket pos_packet{
            .ts = micros(),
            .x = kf.x,
            .y = kf.y,
            .z = kf.z,
        };

        Send(DeviceType::DevPiSerial, pos_packet);
    }
};

REGISTER_AVIONICS_DEVICE(DevGpsImu);
